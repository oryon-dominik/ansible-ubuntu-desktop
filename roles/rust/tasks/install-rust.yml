---

- name: Get the current user.
  user:
    name: "{{ lookup('env', 'USER') | default('root', True) }}"
  register: user


- name: Create temporary installation directory
  ansible.builtin.tempfile:
    state: directory
    suffix: .rustup.install
  register: temp
  changed_when: False


- name: Install nightly RustUp.
  ansible.builtin.shell: |
    set -o pipefail
    "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain {{ rustup_toolchain }}"
  args:
    creates: "{{ user.home }}/.cargo/bin/rustup"
    executable: /bin/bash
  environment:
    TMPDIR: '{{ temp.path }}'
    RUSTUP_HOME: "{{ user.home }}/.rustup"
    CARGO_HOME: "{{ user.home }}/.cargo"

- name: Pull cargo crates from dotfiles github.
  ansible.builtin.uri: url="{{ rust_crates_json_url }}" return_content=yes
  register: rust_crates_json_response

- debug: msg="Error - crates not defined."
  when: rust_crates_json_response["crates"] is not defined

- debug: msg="Success - crates defined =>{{  (rust_crates_json_response.content|from_json)['crates'] }}<="
  when: (json_response.content|from_json)['crates'] is defined

- name: Parse cargo crates from JSON response.
  set_fact:
    rust_crates: "{{ (rust_crates_json_response.content | from_json)['crates'] | json_query(query) }}"
  vars:
    query: "[?os == null || os == 'posix'].crate"

- name: Install all modern unix cargo crates.
  ansible.builtin.shell: |
    set -o pipefail
    cargo install {{ item }}
  with_items: "{{ rust_crates|list }}"
  register: crate_install_result
  changed_when: "'Installed package' in crate_install_result.stderr"
  args:
    executable: /bin/bash
  environment:
    PATH: "{{ ansible_env.PATH }}:{{ user.home }}/.cargo/bin"
    TMPDIR: '{{ temp.path }}'
    RUSTUP_HOME: "{{ user.home }}/.rustup"
    CARGO_HOME: "{{ user.home }}/.cargo"
  when:
    - rust_crates is defined


- name: Cleanup temporary installation directory.
  ansible.builtin.file:
    path: "{{ temp.path }}"
    state: absent
  changed_when: False
